Certainly! Here's a step-by-step guide to creating a MariaDB container using a Debian base image:

Step 1: Create the Dockerfile
Create a new file named "Dockerfile" inside the "srcs/requirements/mariadb" directory. Open the file and add the following content:

```Dockerfile
FROM debian:buster

RUN apt-get update && apt-get install -y mariadb-server

COPY conf/my.cnf /etc/mysql/my.cnf
COPY tools/create_db.sh /usr/local/bin/

RUN chmod +x /usr/local/bin/create_db.sh

EXPOSE 3306

ENTRYPOINT ["create_db.sh"]
```

Step 2: Create the MariaDB configuration file
Create a new directory named "conf" inside the "srcs/requirements/mariadb" directory. Inside the "conf" directory, create a file named "my.cnf" and add the necessary MariaDB configuration. For example:

```
[mysqld]
user = mysql
datadir = /var/lib/mysql
port = 3306
bind-address = 0.0.0.0
```

Step 3: Create the database initialization script
Create a new directory named "tools" inside the "srcs/requirements/mariadb" directory. Inside the "tools" directory, create a file named "create_db.sh" and add the following content:

```bash
#!/bin/bash

service mysql start

mysql -u root -e "CREATE DATABASE IF NOT EXISTS $MYSQL_DATABASE;"
mysql -u root -e "CREATE USER IF NOT EXISTS '$MYSQL_USER'@'%' IDENTIFIED BY '$MYSQL_PASSWORD';"
mysql -u root -e "GRANT ALL PRIVILEGES ON $MYSQL_DATABASE.* TO '$MYSQL_USER'@'%';"
mysql -u root -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '$MYSQL_ROOT_PASSWORD';"

mysqladmin -u root -p$MYSQL_ROOT_PASSWORD shutdown

exec mysqld_safe
```

This script starts the MySQL service, creates the specified database and user, grants privileges to the user, sets the root password, and then starts the MariaDB server.

Step 4: Set up environment variables
In the "srcs/.env" file, add the following environment variables:

```
MYSQL_ROOT_PASSWORD=your_root_password
MYSQL_DATABASE=your_database_name
MYSQL_USER=your_username
MYSQL_PASSWORD=your_password
```

Replace the placeholders with your desired values.

Step 5: Update the docker-compose.yml file
Open the "srcs/docker-compose.yml" file and add the following service definition for MariaDB:

```yaml
services:
  mariadb:
    build:
      context: ./requirements/mariadb
      dockerfile: Dockerfile
    container_name: mariadb
    restart: always
    volumes:
      - db-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    networks:
      - inception

volumes:
  db-data:

networks:
  inception:
```

This service definition builds the MariaDB container using the Dockerfile in the "srcs/requirements/mariadb" directory, sets the container name, restarts the container always, mounts a volume for persistent data storage, passes the environment variables, and connects the container to the "inception" network.

Step 6: Build and run the container
Update your Makefile to include the necessary commands to build and run the MariaDB container using docker-compose. For example:

```makefile
all: build up

build:
    docker-compose -f srcs/docker-compose.yml build

up:
    docker-compose -f srcs/docker-compose.yml up -d

down:
    docker-compose -f srcs/docker-compose.yml down

clean:
    docker-compose -f srcs/docker-compose.yml down --rmi all --volumes
```

Now, when you run `make all`, it will build the MariaDB container and start it along with the other containers defined in your docker-compose.yml file.

That's it! You now have a MariaDB container set up using a Debian base image. The container will start the MariaDB server, create the specified database and user, and be accessible to other containers within the "inception" network.

Remember to customize the configuration, environment variables, and initialization script according to your specific requirements.